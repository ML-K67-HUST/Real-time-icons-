import gradio as gr
import torch
from transformers import pipeline, AutoModelForSequenceClassification, AutoTokenizer
import numpy as np

model_name = "j-hartmann/emotion-english-distilroberta-base"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name)

classifier = pipeline("text-classification", 
                     model=model, 
                     tokenizer=tokenizer,
                     top_k=5)

emoji_mapping = {
    # Emotions
    'joy': 'üòä',
    'happy': 'üòÉ',
    'laugh': 'üòÑ',
    'grin': 'üòÅ',
    'excitement': 'ü§©',
    'surprise': 'üò≤',
    'neutral': 'üòê',
    'sad': 'üò¢',
    'cry': 'üò≠',
    'fear': 'üò®',
    'scared': 'üò±',
    'anger': 'üò†',
    'mad': 'ü§¨',
    'disgust': 'ü§¢',
    'love': 'ü•∞',
    'heart': '‚ù§Ô∏è',
    'tired': 'üò¥',
    'sleepy': 'ü•±',
    'sick': 'ü§í',
    'nerdy': 'ü§ì',
    'cool': 'üòé',
    'wink': 'üòâ',
    'silly': 'ü§™',
    'worried': 'üòü',
    'confused': 'üòï',
    'shocked': 'üò≥',

    # Animals
    'dog': 'üêï',
    'cat': 'üêà',
    'mouse': 'üêÅ',
    'hamster': 'üêπ',
    'rabbit': 'üêá',
    'fox': 'ü¶ä',
    'bear': 'üêª',
    'panda': 'üêº',
    'koala': 'üê®',
    'tiger': 'üêØ',
    'lion': 'ü¶Å',
    'cow': 'üêÑ',
    'pig': 'üê∑',
    'frog': 'üê∏',
    'monkey': 'üêí',
    'chicken': 'üêî',
    'penguin': 'üêß',
    'bird': 'üê¶',
    'eagle': 'ü¶Ö',
    'duck': 'ü¶Ü',
    'swan': 'ü¶¢',
    'dove': 'üïäÔ∏è',
    'butterfly': 'ü¶ã',
    'bee': 'üêù',

    # Food and Drinks
    'pizza': 'üçï',
    'burger': 'üçî',
    'sandwich': 'ü•™',
    'hotdog': 'üå≠',
    'taco': 'üåÆ',
    'sushi': 'üç£',
    'rice': 'üçö',
    'noodles': 'üçú',
    'bread': 'üçû',
    'cheese': 'üßÄ',
    'egg': 'ü•ö',
    'coffee': '‚òï',
    'tea': 'ü´ñ',
    'milk': 'ü•õ',
    'wine': 'üç∑',
    'beer': 'üç∫',

    # Transportation
    'car': 'üöó',
    'taxi': 'üöï',
    'bus': 'üöå',
    'truck': 'üöõ',
    'bicycle': 'üö≤',
    'motorcycle': 'üèçÔ∏è',
    'train': 'üöÇ',
    'airplane': '‚úàÔ∏è',
    'helicopter': 'üöÅ',
    'boat': '‚õµ',
    'ship': 'üö¢',

    # Weather & Nature
    'sun': '‚òÄÔ∏è',
    'moon': 'üåô',
    'star': '‚≠ê',
    'cloud': '‚òÅÔ∏è',
    'rain': 'üåßÔ∏è',
    'snow': '‚ùÑÔ∏è',
    'thunder': '‚ö°',
    'rainbow': 'üåà',
    'flower': 'üå∏',
    'tree': 'üå≥',
    'leaf': 'üçÅ',

    # Sports & Activities
    'football': '‚öΩ',
    'basketball': 'üèÄ',
    'baseball': '‚öæ',
    'tennis': 'üéæ',
    'volleyball': 'üèê',
    'swimming': 'üèä',
    'running': 'üèÉ',
    'dancing': 'üíÉ',
    'skiing': '‚õ∑Ô∏è',
    'surfing': 'üèÑ',

    # Objects & Tools
    'phone': 'üì±',
    'computer': 'üíª',
    'camera': 'üì∑',
    'book': 'üìö',
    'pen': '‚úíÔ∏è',
    'pencil': '‚úèÔ∏è',
    'scissors': '‚úÇÔ∏è',
    'key': 'üîë',
    'lock': 'üîí',
    'clock': '‚è∞',
    'gift': 'üéÅ',
    'money': 'üí∞',
    'shopping': 'üõçÔ∏è',

    # Clothing & Fashion
    'dress': 'üëó',
    'shirt': 'üëï',
    'pants': 'üëñ',
    'shoes': 'üëü',
    'boot': 'üë¢',
    'hat': 'üé©',
    'crown': 'üëë',
    'glasses': 'üëì',
    'handbag': 'üëú',

    # Places & Buildings
    'house': 'üè†',
    'office': 'üè¢',
    'school': 'üè´',
    'hospital': 'üè•',
    'castle': 'üè∞',
    'church': '‚õ™',
    'hotel': 'üè®',
    'store': 'üè™',
    'bank': 'üè¶',

    # Symbols
    'heart_symbol': '‚ô•Ô∏è',
    'peace': '‚úåÔ∏è',
    'check': '‚úÖ',
    'cross': '‚ùå',
    'warning': '‚ö†Ô∏è',
    'question': '‚ùì',
    'music': 'üéµ',
    'fire': 'üî•',
    'sparkle': '‚ú®'
}

def predict_emojis(text):
    """
    Predict emojis based on text analysis.
    Returns relevant emojis for detected words.
    """
    if not text or len(text.strip()) == 0:
        return "üòê"
    
    try:
        # Convert text to lowercase and split into words
        words = text.lower().split()
        
        # Find matching emojis
        found_emojis = []
        for word in words:
            if word in emoji_mapping:
                found_emojis.append(emoji_mapping[word])
        
        # If no emojis found, try emotion classification
        if not found_emojis:
            predictions = classifier(text)
            for pred in predictions[0]:
                emotion = pred['label']
                if pred['score'] > 0.3 and emotion in emoji_mapping:
                    found_emojis.append(emoji_mapping[emotion])
        
        return " ".join(found_emojis) if found_emojis else "üòê"
    
    except Exception as e:
        print(f"Error in prediction: {e}")
        return "üòê"

css = """
.output-emoji { 
    font-size: 2.5em; 
    line-height: 1.5;
    word-wrap: break-word;
}
"""

with gr.Blocks(css=css) as demo:
    gr.Markdown("# Smart Emoji Predictor")
    
    with gr.Row():
        text_input = gr.Textbox(
            label="Type something...",
            placeholder="Express yourself...",
            show_label=True,
            lines=3
        )
        emoji_output = gr.Textbox(
            label="Predicted Emojis",
            show_label=True,
            interactive=False,
            elem_classes=["output-emoji"]
        )
    
    gr.Markdown("""
    This enhanced demo combines emotion recognition with word-to-emoji mapping.
    It analyzes your text in real-time and predicts appropriate emojis based on both
    emotional content and specific words or phrases.
    """)
    
    text_input.change(
        fn=predict_emojis,
        inputs=[text_input],
        outputs=[emoji_output],
        show_progress=False
    )

if __name__ == "__main__":
    demo.queue().launch()